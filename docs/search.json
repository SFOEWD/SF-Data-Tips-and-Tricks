[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SF Data Tips and Tricks",
    "section": "",
    "text": "Introduction\nThis  WIP  Quarto ‘book’ is a collection of (mostly R) tips and tricks relevant to data professionals with the City and County of San Francisco.\nComments, questions, or suggestions? Create an issue here.\nEdits, additions, or corrections? Open a pull request.\nTo learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "datasf.html",
    "href": "datasf.html",
    "title": "1  DataSF",
    "section": "",
    "text": "Getting data from DataSF is a matter of copying the relevant URL into one of R’s many read functions, e.g. readr::read_csv, jsonlite::fromJSON, st::st_read, etc.\n\nlibrary(readr)\nlibrary(sf)\n\nLinking to GEOS 3.9.1, GDAL 3.4.3, PROJ 7.2.1; sf_use_s2() is TRUE\n\nreg_businesses &lt;- read_csv(\"https://data.sfgov.org/resource/g8m3-pdis.csv\")\n\nRows: 1000 Columns: 37\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (22): uniqueid, ttxid, certificate_number, ownership_name, dba_name, fu...\ndbl   (7): business_zip, supervisor_district, :@computed_region_6qbp_sg9q, :...\nlgl   (2): parking_tax, transient_occupancy_tax\ndttm  (6): dba_start_date, dba_end_date, location_start_date, location_end_d...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nBehind the scenes there is a limit parameter that defaults to 1000, even if the ‘All data’ radio button is selected. To retrieve all the data, either read the same URL with the RSocrata package:\n\n\nreg_businesses &lt;- RSocrata::read.socrata(\"https://data.sfgov.org/resource/g8m3-pdis.csv\")\n\nOr append ?$limit=9999999 to the end of the URL:\n\nreg_businesses &lt;- read_csv(\"https://data.sfgov.org/resource/g8m3-pdis.csv?$limit=9999999\")\n\n\n\nRead in a ‘spatial’ object with st_read and the URL with the geojson file extension:\n\nsup_dists &lt;- st_read(\"https://data.sfgov.org/api/geospatial/f2zs-jevy?accessType=DOWNLOAD&method=export&format=GeoJSON\")\n\nReading layer `OGRGeoJSON' from data source \n  `https://data.sfgov.org/api/geospatial/f2zs-jevy?accessType=DOWNLOAD&method=export&format=GeoJSON' \n  using driver `GeoJSON'\nSimple feature collection with 11 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -123.1738 ymin: 37.63983 xmax: -122.3279 ymax: 37.8632\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "spatial.html#arcgis-rest-api",
    "href": "spatial.html#arcgis-rest-api",
    "title": "2  Spatial Stuff",
    "section": "2.1 ArcGIS REST API",
    "text": "2.1 ArcGIS REST API\nThe {arcgislayers} package allows users to read and write data from and to the ArcGIS REST API.\n\n2.1.1 Reading Layers\n\nsf_libraries_url &lt;- \"https://services.arcgis.com/Zs2aNLFN00jrS4gG/arcgis/rest/services/SF_Libraries/FeatureServer\"\n# arc_open can read a FeatureServer or a FeatureLayer directly\n(sf_libraries_fs &lt;- arc_open(sf_libraries_url))\n\n&lt;FeatureServer &lt;2 layers, 0 tables&gt;&gt;\nCRS: 3857\nCapabilities: Query\n  0: Libraries (esriGeometryPoint)\n  1: Libraries with Air Conditioning (esriGeometryPoint)\n\n(sf_libraries_lyr &lt;- get_layer(sf_libraries_fs, name = \"Libraries\"))\n\n&lt;FeatureLayer&gt;\nName: Libraries\nGeometry Type: esriGeometryPoint\nCRS: 3857\nCapabilities: Query\n\nsf_libraries &lt;- arc_select(sf_libraries_lyr)\n\nRegistered S3 method overwritten by 'jsonify':\n  method     from    \n  print.json jsonlite\n\nglimpse(sf_libraries)\n\nRows: 33\nColumns: 23\n$ objectid         &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16…\n$ gross_sq_f       &lt;chr&gt; \"8500\", \"6465\", \"6096\", \"8536\", \"7633\", \"6100\", \"8000…\n$ block_lot        &lt;chr&gt; \"8708110\", \"3564095\", \"6539034\", \"2919031\", \"0469001\"…\n$ zip_code         &lt;chr&gt; \"94158\", \"94114\", \"94114\", \"94127\", \"94123\", \"94112\",…\n$ facility_i       &lt;chr&gt; \"1113\", \"648\", \"1184\", \"1853\", \"1053\", \"896\", \"1858\",…\n$ city             &lt;chr&gt; \"San Francisco\", \"San Francisco\", \"San Francisco\", \"S…\n$ latitude         &lt;chr&gt; \"37.775369728\", \"37.76406037\", \"37.750228042\", \"37.74…\n$ department       &lt;chr&gt; \"Public Library\", \"Public Library\", \"Public Library\",…\n$ longitude        &lt;chr&gt; \"-122.393097384\", \"-122.431881717\", \"-122.435090242\",…\n$ dept_id          &lt;chr&gt; \"48\", \"48\", \"48\", \"48\", \"48\", \"48\", \"48\", \"48\", \"48\",…\n$ common_nam       &lt;chr&gt; \"Mission Bay Library\", \"Eureka Valley Branch Library/…\n$ address          &lt;chr&gt; \"960 04th St\", \"1 Jose Sarria Ct\", \"451 Jersey St\", \"…\n$ supervisor       &lt;chr&gt; \"6\", \"8\", \"8\", \"7\", \"2\", \"7\", \"5\", \"6\", \"10\", \"8\", \"9…\n$ city_tenan       &lt;chr&gt; \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"…\n$ owned_leas       &lt;chr&gt; \"Own\", \"Own\", \"Own\", \"Own\", \"Own\", \"Own\", \"Own\", \"Own…\n$ globalid         &lt;chr&gt; \"755632fc-18d9-4c0e-b65d-ec53d18a132b\", \"195a2a2b-302…\n$ created_user     &lt;chr&gt; \"nancy.milholland_sfdem\", \"nancy.milholland_sfdem\", \"…\n$ created_date     &lt;dttm&gt; 2019-06-07 21:44:34, 2019-06-07 21:44:34, 2019-06-07…\n$ last_edited_user &lt;chr&gt; \"nancy.milholland_sfdem\", \"nancy.milholland_sfdem\", \"…\n$ last_edited_date &lt;dttm&gt; 2019-06-07 21:44:34, 2019-06-07 21:44:34, 2019-06-07…\n$ eas_id           &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ air_conditioning &lt;chr&gt; \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Sec…\n$ geometry         &lt;POINT [m]&gt; POINT (-13624737 4547742), POINT (-13629055 454…\n\n# You can also specify which columns to select, e.g.:\n# arc_select(\n#   sf_libraries_lyr,\n#   fields = c(\"common_nam\", \"gross_sq_f\", \"address\"),\n#   where = \"gross_sq_f &lt; 8000\"\n# )\n\n# With pipes:\n# sf_libraries_url %&gt;% \n#   arc_open() %&gt;% \n#   get_layer(name = \"Libraries\") %&gt;% \n#   arc_select()\n\n# With pipes and tidyverse:\n# (if the url points to a FeatureLayer instead of a FeatureServer)\n# sf_libraries_url %&gt;% \n#   arc_open() %&gt;% \n#   select(common_nam, gross_sq_f, address) %&gt;% \n#   filter(gross_sq_f &lt; 8000) %&gt;% \n#   collect()\nmapview(sf_libraries, zcol = \"air_conditioning\")\n\n\n\n\n\n\nIt is also convenient to wrap this up into the body of a single function:\n\nget_arcgis_layer &lt;- function(lyr_name) {\n  url &lt;- glue::glue(\"https://services.arcgis.com/Zs2aNLFN00jrS4gG/arcgis/rest/services/{lyr_name}/FeatureServer/0\")\n  out &lt;- arcgislayers::arc_select(arcgislayers::arc_open(url))\n  return(out)\n}\n\nlibraries &lt;- get_arcgis_layer(\"SF_Libraries\")\n\n\n\n2.1.2 Writing Layers\nIf you have an sfgov.maps.arcgis.com account, you can write layers directly to your content. Read the authorization page for more information on credentials and tokens.\n\nnc &lt;- st_read(system.file(\"shape/nc.shp\", package = \"sf\"))\ntkn &lt;- auth_code()\nset_arc_token(tkn)\n\npublish_res &lt;- publish_layer(nc, \"North Carolina SIDS sample\")"
  },
  {
    "objectID": "spatial.html#arcgis-pro",
    "href": "spatial.html#arcgis-pro",
    "title": "2  Spatial Stuff",
    "section": "2.2 ArcGIS Pro",
    "text": "2.2 ArcGIS Pro\nIf you have an ArcGIS Pro license, you can write directly to geodatabases within Projects using the {arcgisbinding} package.\n\n\nReading layer `OGRGeoJSON' from data source \n  `https://data.sfgov.org/api/geospatial/f2zs-jevy?accessType=DOWNLOAD&method=export&format=GeoJSON' \n  using driver `GeoJSON'\nSimple feature collection with 11 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -123.1738 ymin: 37.63983 xmax: -122.3279 ymax: 37.8632\nGeodetic CRS:  WGS 84\n\n\n\nlibrary(arcgisbinding)\n# arc.check_product()\n\n# Get Supervisor Districts from DataSF:\nsup_dists &lt;- st_read(\"https://data.sfgov.org/api/geospatial/f2zs-jevy?accessType=DOWNLOAD&method=export&format=GeoJSON\")\n\n# Write to ArcGIS Pro project geodatabase\nproj_path &lt;- \"...&lt;full_path&gt;.../ArcGIS/Projects/Test R Project/Test R Project.gdb/sup_dist\"\narc.write(path = proj_path, data = sup_dists)"
  },
  {
    "objectID": "spatial.html#spatial-joins",
    "href": "spatial.html#spatial-joins",
    "title": "2  Spatial Stuff",
    "section": "2.3 Spatial Joins",
    "text": "2.3 Spatial Joins\nUse spatial joins to determine which points are ‘within’ which polygon:\n\nnhoods &lt;- st_read(\"https://data.sfgov.org/resource/j2bu-swwd.geojson\")\n\nReading layer `j2bu-swwd' from data source \n  `https://data.sfgov.org/resource/j2bu-swwd.geojson' using driver `GeoJSON'\nSimple feature collection with 41 features and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -122.5149 ymin: 37.70813 xmax: -122.357 ymax: 37.8333\nGeodetic CRS:  WGS 84\n\n# The coordinate reference systems must match\nst_crs(sf_libraries) == st_crs(sup_dists)\n\n[1] FALSE\n\nsf_libraries %&gt;% \n  select(common_nam) %&gt;% \n  st_transform(st_crs(sup_dists)) %&gt;% \n  st_join(sup_dists %&gt;% select(sup_dist), join = st_within) %&gt;% \n  st_join(nhoods, join = st_within)\n\nSimple feature collection with 33 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -122.4981 ymin: 37.71245 xmax: -121.9681 ymax: 37.80253\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                                                          common_nam sup_dist\n1                                                Mission Bay Library        6\n2  Eureka Valley Branch Library/ Harvey Milk Memorial Branch Library        8\n3                                          Noe Valley Branch Library        8\n4                                         West Portal Branch Library        7\n5                                              Marina Branch Library        2\n6                                                   Ingleside Branch        7\n7                                    Western Addition Branch Library        5\n8                                           Library Support Services        6\n9                                   Visitacion Valley Branch Library       10\n10                                          Glen Park Branch Library        8\n                 nhood                   geometry\n1          Mission Bay POINT (-122.3931 37.77537)\n2  Castro/Upper Market POINT (-122.4319 37.76406)\n3           Noe Valley POINT (-122.4351 37.75023)\n4   West of Twin Peaks POINT (-122.4661 37.74137)\n5               Marina POINT (-122.4341 37.80137)\n6   West of Twin Peaks POINT (-122.4563 37.72406)\n7            Japantown POINT (-122.4375 37.78412)\n8      South of Market POINT (-122.4137 37.77501)\n9    Visitacion Valley POINT (-122.4079 37.71245)\n10           Glen Park POINT (-122.4338 37.73398)"
  },
  {
    "objectID": "spatial.html#removing-farallon-islands-from-supervisor-districts",
    "href": "spatial.html#removing-farallon-islands-from-supervisor-districts",
    "title": "2  Spatial Stuff",
    "section": "2.4 Removing Farallon Islands from Supervisor Districts",
    "text": "2.4 Removing Farallon Islands from Supervisor Districts\n\nd4 &lt;- sup_dists %&gt;% \n  filter(sup_dist == 4) %&gt;% \n  st_cast(\"POLYGON\") %&gt;% \n  slice(1) %&gt;% \n  st_cast(\"MULTIPOLYGON\")\n\nWarning in st_cast.sf(., \"POLYGON\"): repeating attributes for all\nsub-geometries for which they may not be constant\n\nsup_dists_no_farallon &lt;- sup_dists %&gt;% \n  filter(sup_dist != 4) %&gt;% \n  bind_rows(d4)\n\nmapview(sup_dists_no_farallon)"
  },
  {
    "objectID": "spatial.html#census-data",
    "href": "spatial.html#census-data",
    "title": "2  Spatial Stuff",
    "section": "2.5 Census Data",
    "text": "2.5 Census Data\nThe {tidycensus package} is fantastic, and the documentation is full of helpful examples.\n\nlibrary(tidycensus)\n\nsf &lt;- get_acs(\n  state = \"CA\",\n  county = \"San Francisco\",\n  geography = \"tract\",\n  variables = \"B19013_001\",\n  geometry = TRUE,\n  year = 2020\n) %&gt;% \n  st_transform(3857)\n\nGetting data from the 2016-2020 5-year ACS\n\n\nDownloading feature geometry from the Census website.  To cache shapefiles for use in future sessions, set `options(tigris_use_cache = TRUE)`.\n\nsf_bbox &lt;- libraries %&gt;% \n  drop_na(city) %&gt;% \n  st_buffer(3500) %&gt;% \n  st_bbox()\n  \nsf %&gt;%\n  ggplot(aes(fill = estimate)) + \n  geom_sf(color = NA) + \n  coord_sf(xlim = sf_bbox[c(\"xmin\", \"xmax\")], ylim = sf_bbox[c(\"ymin\", \"ymax\")], expand = TRUE) +\n  scale_fill_viridis_c(option = \"magma\")"
  },
  {
    "objectID": "geocoding.html#city-locator",
    "href": "geocoding.html#city-locator",
    "title": "3  Geocoding",
    "section": "3.1 City Locator",
    "text": "3.1 City Locator\nThere are several ways to geocode addresses from R, but the easiest (and cheapest) way is with the {tidygeocoder} package and one of the city’s internal locators.\n\n\n\n\n\n\nNote\n\n\n\nThe locator will only geocode San Francisco addresses.\n\n\n\nlibrary(tidygeocoder)\nlibrary(sf)\n\nLinking to GEOS 3.9.1, GDAL 3.4.3, PROJ 7.2.1; sf_use_s2() is TRUE\n\nlibrary(mapview)\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2\n──\n\n\n✔ ggplot2 3.4.0     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.2.1     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 0.5.2\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\ndf &lt;- tibble(address = c(\"1 South Van Ness\", \"1 Dr Carlton B Goodlett Pl\"))\nlocator &lt;- \"https://gis.sf.gov/svc/rest/services/loc/c83_eas_str_ctrl_composite/GeocodeServer/findAddressCandidates\"\n\ncoords &lt;- df %&gt;% \n  geocode(\n    api_url = locator,\n    address = address,\n    custom_query = list(outSR = \"4326\"), # outSR (Spatial Reference) is a required parameter\n    method = \"arcgis\"\n  )\n\nPassing 2 addresses to the ArcGIS single address geocoder\nQuery completed in: 0.3 seconds\n\ncoords\n\n# A tibble: 2 × 3\n  address                      lat  long\n  &lt;chr&gt;                      &lt;dbl&gt; &lt;dbl&gt;\n1 1 South Van Ness            37.8 -122.\n2 1 Dr Carlton B Goodlett Pl  37.8 -122.\n\ncoords_sf &lt;- coords %&gt;% st_as_sf(coords = c(\"long\", \"lat\"), crs = 4326)\nmapview(coords_sf)"
  },
  {
    "objectID": "geocoding.html#geocodio",
    "href": "geocoding.html#geocodio",
    "title": "3  Geocoding",
    "section": "3.2 geocodio",
    "text": "3.2 geocodio\nIf you need to geocode addresses outside the city, the geocodio service is a nice option, but you’ll first need to obtain your API key. Sign up for an account and register for an API key. Once you have it, you need to put it in your .Renviron file, a special text file that runs every time you open/restart R.\nEdit your .Renviron file with the usethis package:\n\nlibrary(usethis)\nedit_r_environ() # this opens the file in RStudio\n\nPaste your API key like so:\nGEOCODIO_API_KEY='&lt;your_api_key&gt;'\nSave the file and restart R. You should then be able to call geocode with the method = 'geocodio' argument. Note that there is a rate limit of 1000 addresses per hour."
  },
  {
    "objectID": "sharepoint.html",
    "href": "sharepoint.html",
    "title": "4  Sharepoint",
    "section": "",
    "text": "Sharepoint is part of many data pipelines, and the easiest way to interact with Sharepoint from R is through the {Microsoft365R} package. This package has been vetted by the Department of Technology (DT) and authentication should be straight-forward after calling one of the initial functions.\n\nlibrary(Microsoft365R)\n\nwp &lt;- get_sharepoint_site(\"ECN-Workforce Programs\")\nwp_docs &lt;- wp$get_drive(\"Documents\")\n\nwp_docs$list_files()\n\nwp_docs$download_file(\"path_to_file.xlsx\")\n\nIt is helpful to wrap common read/write operations into more usable functions:\n\nconnect_to_sharepoint_site_docs &lt;- function(sp_site) {\n  sp_site &lt;- Microsoft365R::get_sharepoint_site(sp_site)\n  sp_site_doc &lt;- sp_site$get_drive(\"Documents\")\n  return(sp_site_doc)\n}\n\nconnect_to_wp_docs &lt;- function() connect_to_sharepoint_site_docs(\"ECN-Workforce Programs\")\n\ndownload_from_wp &lt;- function(sp_file, destination) {\n  docs &lt;- connect_to_wp_docs()\n  docs$download_file(sp_file, dest = destination)\n  cli::cli_alert_success(glue::glue(\"{sp_file} downloaded.\"))\n}\n\nupload_to_wp &lt;- function(file, sp_destination) {\n  docs &lt;- connect_to_wp_docs()\n  docs$upload_file(\n    file,\n    sp_location\n  )\n  cli::cli_alert_success(\"File uploaded.\")\n}\n\nread_wp &lt;- function(path) {\n  tmp &lt;- tempfile(fileext = \"xlsx\")\n  download_from_wp(\n    sp_file = glue(\"{path}.xlsx\"),\n    destination = tmp\n  )\n  out &lt;- readxl::read_excel(tmp, .name_repair = janitor::make_clean_names)\n  return(out)\n}"
  },
  {
    "objectID": "icons.html",
    "href": "icons.html",
    "title": "5  Icons",
    "section": "",
    "text": "The Digital Services team has provided a nifty set of icons on the San Francisco Design System website. You can use these icons in Quarto (HTML) documents by installing the sficons extension from GitHub here.\nquarto install extension SFOEWD/sficons\nTo embed an icon, use the  shortcode. Some examples:\n\n{{&lt; sficon wip &gt;}}\n{{&lt; sficon alert &gt;}}\n\n\n\n\n{{&lt; sficon arrow-right color=firebrick &gt;}}\n\n{{&lt; sficon globe color=green size=5em &gt;}}\n\n{{&lt; sficon pencil color=gold size=10em &gt;}}\n\nControl the color and size of the icons:"
  },
  {
    "objectID": "targets.html",
    "href": "targets.html",
    "title": "6  {targets} Pipelines",
    "section": "",
    "text": "WIP"
  }
]